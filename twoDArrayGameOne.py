#mastermind
'''

gen cohen
honors cs, python
period 10
mastermind: computer generates a code of four colors, user tries to guess the code (google mastermind game)
'''

import pygame, sys, math,random, time, copy

#Initializing game engine
pygame.init()


#Set up drawing surface
w = 400
h = 500
size = (w,h)
surface = pygame.display.set_mode(size)

#Set window title bar
pygame.display.set_caption("Mastermind Cohen")

#Color Constants
WHITE = (255,255,255)
BLACK = (0,0,0)
RED = (255,0,0)
GREEN = (0,255,0)
BLUE = (0,0,255)
ORANGE = (255,165,0)
DARKGREEN = (25, 109, 0)
LIGHTBROWN = (139,69,19)
DARKBROWN = (169, 169, 169)
GREENBLUE = (81,212,190)
YELLOW = (255,255,0)
GRAY = (169,169,169)
COLORS = [RED, BLUE, YELLOW, GREEN, WHITE, BLACK]
clock = pygame.time.Clock()
#pickUpSound = pygame.mixer.Sound("pickup.wav")



#--------------------functions--------------------


'''
set game to original position
reset variables and the screen
'''
def resetGame():
    gameOver = False
    frame_count = 0
    frame_rate = 60
    start_time = 90
    secretCode = [0,0,0,0]#random code generated by computer, corresponds to colors
    secretCode = getSecretCode(secretCode)
    #print(secretCode)
    
    ifCodeGuessed = False#if the user has guessed the code correctly
    userGuessNum =0#keep track of which guess the user is on
    feedBackPegs = [[GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY],
            [GRAY,GRAY,GRAY,GRAY]]
    
    pegs = [[DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN],
            [DARKBROWN,DARKBROWN,DARKBROWN,DARKBROWN]] #click to rotate through colors press enter to guess
            
    pegRects = [[0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0, 0, 0, 0],
             [0,0, 0, 0]]
             
    for r in range(1,9):#loop through the rows
        for c in range(2,6):#loop through the columns in each row
            pegRects[r-1][c-2] = pygame.Rect(int(c*w/8 + w/32), int((r+1)*h/10 +h/40),int(w/12),int(w/12) )#fill out pegRects
            
    return gameOver, secretCode, ifCodeGuessed, userGuessNum, feedBackPegs, pegs,pegRects


'''
input: the user peg colors and the secret code colors, and which row they are guessing on
compares the user guess to the computer guess
return: true if they guessed ocrrect, false if they guess wrong, color feedBackPegs should be
'''
def checkGuess(pegsList, secretCode, userGuessNum, feedBackPegs):
    
    
     #see if they got the code #pegs
    for r in range(0,8):#loop through the rows of pegsList
        if(pegsList[r] == secretCode):
            correctGuess =  True
            break
        else:
            correctGuess = False
    
    for c in range(len(pegsList[userGuessNum])-1,-1,-1):#loop through all the pegs in the row that they are guessing in
        color = False
        spot = False
        for j in range(0,len(pegsList[userGuessNum])):#loop through the secret code and compare each color to it #pegs
            if(pegsList[userGuessNum][c] == secretCode[j]):
                color =True
        if(pegsList[userGuessNum][c] == secretCode[c]):#if the same color and same place
            spot = True
            color = False
        
        if(color == True):#if it is only same color not spot
            feedBackPegs[userGuessNum][c] = WHITE
        
        elif(spot == True):#if same spot
            feedBackPegs[userGuessNum][c] = BLACK
        
        
        
    #print(feedBackPegs)
    
    return correctGuess,  feedBackPegs
    
'''
input: the secret code
changes it to four random colors
returns the new secret code
'''
def getSecretCode(secretCode):
    for i in range(0,len(secretCode)):
        secretCode[i] = random.choice(COLORS)
    return secretCode





'''
input the list with the colors the pegs are supposed to be, and the guess number the user is on
draw the four pegs on the side with correct colors
'''
def drawFeedBackPegs(feedBackPegs, userGuessNum):

    #loop trough feedBackPegs and draw it on the right row
    for r in range(len(feedBackPegs)):
        pygame.draw.circle(surface, feedBackPegs[r][0], [int(w/8+w/32), int((r+2)*h/10 + h/40)], int(w/(24*4)), 0)#upper left
        pygame.draw.circle(surface, feedBackPegs[r][1], [int(w/8+w/32), int((r+2)*h/10 + h/20)], int(w/(24*4)), 0)#bottom left
        pygame.draw.circle(surface, feedBackPegs[r][2], [int(w/8+w/16), int((r+2)*h/10 + h/40)], int(w/(24*4)), 0)#upper right
        pygame.draw.circle(surface, feedBackPegs[r][3], [int(w/8+w/16), int((r+2)*h/10 + h/20)], int(w/(24*4)), 0)#bottom right


    
'''
input: color of pegs, position of pegs
draw the guessing pegs
return nothing
'''
def drawPegs(pegs, pegRects):
    
    #loop for each row then each column in each row
    for r in range(1,9):#loop through the rows
        for c in range(2,6):#loop through the columns in each row
            pygame.draw.circle(surface, pegs[r-1][c-2], [int(c*w/8 + w/16),int((r+1)*h/10 +h/20)],int(w/24), 0)
            
'''
draws the screen
pegs, fourpegs, logo, secretCode
'''
def drawScreen(pegs, pegRects, ifCodeGuessed, feedBackPegs, userGuessNum, gameOver, secretCode):
    #draw the light brown board backgroup, leave gaps on the outside where the board is not, and at top where message and code r
    pygame.draw.rect(surface, LIGHTBROWN, (w/8,h/10,6*w/8,h),0)
    
    #draw the green- blue box where the secret code is
    if(gameOver == False):
        pygame.draw.rect(surface, GREENBLUE, (2*w/8,h/10,4*w/8,h/10),0)
    else:#if the game is over, reveal the secret code
        for c in range(len(secretCode)):#loop through the secret code
            pygame.draw.circle(surface, secretCode[c], [int((c+2)*w/8 + w/16),int((1)*h/10 +h/20)],int(w/24), 0)
    
    #draw the circles which represent open pegs that dont have guesses in them yet, where the user guesses
    drawPegs(pegs, pegRects)
    
    
            
    #draw the fourpegs, loop through each row
    
    
    drawFeedBackPegs(feedBackPegs, userGuessNum)
            
    #draw the mastermind logo
    showMessageSideways("Mastermind", "Consolas", w/8, w-w/6, h/2+h/14,GREENBLUE)
    showMessageSideways("press r to reset", "Consolas", w/20, w-w/10, h/2+h/14, WHITE, bg = None)
    
    #draw the vertical lines that seperate the screen, gap, fourpegs, one peg, one peg, one peg, one pge, master logo, gap
    for j in range(1,8):
        pygame.draw.line(surface, BLACK, (j*w/8,h), (j*w/8, h/10), 5) 
    
    #draw horixontal lines that seperate, message, comp code, 8 guess
    for i in range(1,9):
        pygame.draw.line(surface,BLACK, (w/8,(i+1)*h/10), (6*w/8,(i+1)*h/10), 5)
        
    #message at top
    
    if(ifCodeGuessed == True):
        showMessage("You Win!", "Consolas", w/20, w/2, h/20, WHITE, bg = None)
        
    elif(userGuessNum == 8):
        showMessage("You Lose!", "Consolas", w/20, w/2, h/20, WHITE, bg = None)
    elif(userGuessNum > 0):#if they have hit enter
        showMessage("Small pegs give feedback about your guess. (in no order)", "Consolas", w/30, w/2, h/40, WHITE, bg = None)
        showMessage("A white peg means a correct color in the wrong spot.", "Consolas", w/30, w/2, h/20, WHITE, bg = None)
        showMessage("A black peg means a correct color in the correct spot.", "Consolas", w/30, w/2, h/13, WHITE, bg = None)
        
    else: #if they havent guessed right yet
        showMessage("Click the pegs to change their colors.", "Consolas", w/30, w/2, h/40, WHITE)
        showMessage("Hit enter to compare your guess to the secret code.", "Consolas",w/30,w/2, h/20,WHITE)
 
    
   
    
     
    
'''
put text on the screen
'''
def showMessage(words, fontName, size, xVal, yVal, foreColor, bg = None):
    fontName = pygame.font.SysFont(fontName, size, 0,0)
    text = fontName.render(words,True, foreColor,bg)
    
    #get the rectangle bounding box of the text
    textBounds = text.get_rect()
    
    #center at x,y
    textBounds.center = (xVal, yVal)
    
    surface.blit(text, textBounds)
    return textBounds
    
'''
show a message sideways
'''
def showMessageSideways(words, fontName, size, xVal, yVal, foreColor, bg = None):
    
    fontName = pygame.font.SysFont(fontName, size, 0,0)
    text = fontName.render(words,True, foreColor,bg)
    text = pygame.transform.rotate(text, 90)
    #get the rectangle bounding box of the text
    textBounds = text.get_rect()
    
    #center at x,y
    textBounds.center = (xVal, yVal)
    
    surface.blit(text, textBounds)
    return textBounds
    
#----------------main program loop----------------
def main():
    
    # data initializations (model)
    gameOver, secretCode, ifCodeGuessed, userGuessNum, feedBackPegs, pegs,pegRects   = resetGame()
    
            
    #drawScreen(pegs, pegRects, ifCodeGuessed, numSpot, numColor)
   
    
    #main program loop
    while(True):
        #pickUpSound.play()
        
        #controller code
        for event in pygame.event.get():
            if (event.type == pygame.QUIT or (event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE)):
                pygame.quit()
                sys.exit()
        
        
        
    
            #other single keypress events
            if(event.type == pygame.MOUSEBUTTONDOWN and event.button == 1 and gameOver == False):#if they click the peg
                pos = pygame.mouse.get_pos()
                #test collision for mouse over pegs   
                for r in range(0,8):#loop through the rows of pegs  
                    for c in range(0,4):#loop through the columns of pegs
                        pegBounds = pegRects[r][c]
                        
                        #print("i am on peg", r, c)
                        if(pegBounds.collidepoint(pygame.mouse.get_pos())):#if the mouse is over the peg
                        
                            if( r == userGuessNum):#if they click on a peg in the row they are guessing currently
                                #print("I see your click")
                                #make them go to the next color
                                currentColor = pegs[r][c]
                                if(currentColor == DARKBROWN):#if its the begining of the game
                                    currentColor = BLACK
                                    
                                indexCurrentColor = COLORS.index(currentColor)
                                if(indexCurrentColor != 5):#if it is not the last color
                                    newColor = COLORS[indexCurrentColor +1]
                                    #print("i work")
                                else: #if they are on the last color, go back to the first color
                                    newColor = COLORS[0]
                                pegs[r][c] = newColor
             
            #check for if they hit enter to enter their guess
            if(event.type == pygame.KEYDOWN and event.key == pygame.K_RETURN and gameOver == False):#if they hit enter
                
                
                ifCodeGuessed, feedBackPegs = checkGuess(pegs, secretCode, userGuessNum, feedBackPegs)
                
                userGuessNum +=1 #put them onto the next row
                if(ifCodeGuessed == True):#if they guessed the codes
                    gameOver = True
        
                elif(userGuessNum ==8):#if they ran out of guesses
                    gameOver = True
        
            if(event.type == pygame.KEYDOWN and event.key == pygame.K_r):#if they press enter to rest
                gameOver, secretCode, ifCodeGuessed, userGuessNum, feedBackPegs, pegs,pegRects   = resetGame()
        
            
        #game logic statements here to change the model
        #Set Background Fill
        surface.fill(BLACK)   
        
        
        
        #draw the view
        drawScreen(pegs, pegRects, ifCodeGuessed, feedBackPegs, userGuessNum, gameOver, secretCode)
        #print(gameOver)
        #print(userGuessNum)
  
  
  
        #updates screen
        pygame.display.update()
        # ALL CODE TO DRAW SHOULD GO ABOVE THIS COMMENT
        
    
main()#call the main function